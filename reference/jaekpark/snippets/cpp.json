{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	// cpp_header_file_snippets_with_class_definition
	"class_instance" : {
		"prefix" : "#if",
		"body" : [
			"#ifndef _FT_${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_HPP",
			"#define _FT_${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_HPP",
			"",
			"//namespace_start",
			"template <$1>",
			"class ${TM_FILENAME_BASE}$2 $3{",
			"protected:",
			"$4",
			"private:",
			"$5",
			"public:",
			"\t//default_constructor",
			"\t$explicit ${TM_FILENAME_BASE}$2(void);",
			"\t//copy_constructor",
			"\t$explicit ${TM_FILENAME_BASE}$2(const ${TM_FILENAME_BASE}$2& x);",
			"\t//destructor",
			"\t~${TM_FILENAME_BASE}$2(void);",
			"\t//operator=",
			"\t${TM_FILENAME_BASE}$2 operator=(const ${TM_FILENAME_BASE}$2& x);",
			"};",
			"//namespace_end",
			"#endif"
		],
		"description" : "c++ header file snippets."
	},
	// typedef_snippets
	"typedef_typename" : {
		"prefix" : "typ",
		"body" : [
			"typedef typename $1"
		],
		"description" : "typedef snippets"
		},
	// cpp_header_file_snippets_with_class_definition
	"struct_instance" :	{
	"prefix" : "#if",
		"body" : [
			"#ifndef _FT_${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_HPP",
			"#define _FT_${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_HPP",
			"",
			"//namespace_start",
			"template <$1>",
			"struct ${TM_FILENAME_BASE}$2 $3{",
			"protected:",
			"$4",
			"private:",
			"$5",
			"public:",
			"\t//default_constructor",
			"\t$explicit ${TM_FILENAME_BASE}$2(void);",
			"\t//copy_constructor",
			"\t$explicit ${TM_FILENAME_BASE}$2(const ${TM_FILENAME_BASE}$2& x);",
			"\t//destructor",
			"\t~${TM_FILENAME_BASE}$2(void);",
			"\t//operator=",
			"\t${TM_FILENAME_BASE}$2 operator=(const ${TM_FILENAME_BASE}$2& x);",
			"};",
			"//namespace_end",
			"#endif"
		],
		"description" : "c++ header file snippets."
	},
	//default_struct_with_name
	"struct_meta" :	{
	"prefix" : "#if",
		"body" : [
			"#ifndef _FT_${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_HPP",
			"#define _FT_${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_HPP",
			"",
			"//namespace_start",
			"//template <>",
			"struct ${TM_FILENAME_BASE}$1 {};",
			"//namespace_end",
			"#endif"
		],
		"description" : "c++ header file snippets."
	},
	//header_for_function
	"function" : {
		"prefix": "#if",
		"body": [
			"#ifndef _FT_${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_HPP",
			"#define _FT_${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_HPP",
			"",
			"//namespace_start",
			"template <$1>",
			"\tvoid$2 ${TM_FILENAME_BASE}$3($4) {$5};",
			"//namespace_end",
			"#endif"
		]
	},
	//default_header
	"default" : {
		"prefix" : "#if",
		"body" : [
			"#ifndef _FT_${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_HPP",
			"#define _FT_${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_HPP",
			"",
			"//namespace_start",
			"$1",
			"//namespace_end",
			"#endif"
		],
	},
	//class_snippets
	"ocf_class_snippets": {
		"prefix" : "cla",
		"body" : [
			"template <$1>",
			"class /*class_name*/$2 $3{",
			"private:",
			"$4",
			"protected:",
			"$5",
			"public:",
			"\t//default_constructor",
			"\t$explicit /*class_name*/$2(void);",
			"\t//copy_constructor",
			"\t$explicit /*class_name*/$2(const /*class_name*/$2& x);",
			"\t//destructor",
			"\t~/*class_name*/$2(void);",
			"\t//operator=",
			"\t/*class_name*/$2 operator=(const /*class_name*/$2& x);",
			"};"
		]
	},
	//struct_snippets
	"ocf_struct_snippets": {
		"prefix" : "stru",
		"body" : [
			"template <$1>",
			"strcut /*struct_name*/$2 $3{",
			"private:",
			"$4",
			"protected:",
			"$5",
			"public:",
			"\t//default_constructor",
			"\t$explicit /*struct_name*/$2(void);",
			"\t//copy_constructor",
			"\t$explicit /*struct_name*/$2(const /*struct_name*/$2& x);",
			"\t//destructor",
			"\t~/*struct_name*/$2(void);",
			"\t//operator=",
			"\t/*struct_name*/$2 operator=(const /*struct_name*/$2& x);",
			"};"
		]
	},
	//return_one_line
	"return_one_line" : {
		"prefix" : "re",
		"body" : [
			"{ return $1; }"
		]
	},
	//for_loop
	"for_snippets" : {
		"prefix" : "fo",
		"body" : [
			"for($1; $2; $3) {",
			"/*routine*/$4",
			"}"
		]
	},
	//print_to_stdout_with_endline
	"cout_with_endline" : {
		"prefix" : "cout",
		"body" : [
			"std::cout << $1 << std::endl;"
		]
	},
	//with_arg
	"main_with_arg" : {
		"prefix": "ma",
		"body" : [
			"int main(int argc, const char **argv) {",
			"/*routine*/$1",
			"}"
		]
	},
	//without_arg
	"main_without_arg" : {
		"prefix": "ma",
		"body" : [
			"int main(void) {",
			"/*routine*/$1",
			"}"
		]
	}
}
